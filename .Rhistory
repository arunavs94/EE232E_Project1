source('C:/Users/Steven/Desktop/EE232E_Project1/Q6.R')
source('C:/Users/Steven/Desktop/EE232E_Project1/Q6.R')
totMat
tmp
features[1]]
features[[1]]
features[[1]][1]
totMat = numeric()
for (i in 1:40) { # For each core node
# Create matrix of values
# List of all features for each community concatenated
list_core_i = unlist(features[[i]])
tmp_list = c(list_core_i,NaN,NaN,NaN,NaN) # First NaN = T1 ind, Last NaN = T2 ind
temp_mat = t(matrix(tmp_list,4,(length(tmp_list)/4)))
totMat = rbind(totMat,temp_mat)
break
}
list_core_i
temp_mat
temp_mat[,4]
source('C:/Users/Steven/Desktop/EE232E_Project1/Q6.R')
totMat
temp_mat
source('C:/Users/Steven/Desktop/EE232E_Project1/Q6.R')
temp_mat
totMat
com_size_list = temp_mat[,4]
density_list = temp_mat[,3]
modularity_list = temp_max[,1]
com_size_list = temp_mat[,4]
density_list = temp_mat[,3]
modularity_list = temp_mat[,1]
totMat
temp_mat
com_size_list
which.max(com_size_list)
test = c(100, inf , 102 , 2)
test = c(100, Inf , 102 , 2)
test
which.max(test)
which.min(test)
test=numeric()
test
com_size_list = temp_mat[,4]
density_list = temp_mat[,3]
modularity_list = temp_mat[,1]
min_idx = which.min(com_size_list)
smallest_sizes = c(smallest_sizes, min_idx)
com_size_list[min_idx] = Inf
min_idx_2 = which.min(com_size_list)
smallest_sizes = c(smallest_sizes, min_idx_2)
smallest_sizes = numeric() #store indices of 2 smallest community sizses
com_size_list = temp_mat[,4]
density_list = temp_mat[,3]
modularity_list = temp_mat[,1]
min_idx = which.min(com_size_list)
smallest_sizes = c(smallest_sizes, min_idx)
com_size_list[min_idx] = Inf
min_idx_2 = which.min(com_size_list)
smallest_sizes = c(smallest_sizes, min_idx_2)
temp_mat
smallest_sizes
# Find T1 (indicies for community of type 1)
com_size_list = temp_mat[,4]
density_list = temp_mat[,3]
modularity_list = temp_mat[,1]
# find 2 smallest size comms
min_idx = which.min(com_size_list)
smallest_sizes = c(smallest_sizes, min_idx)
com_size_list[min_idx] = Inf
min_idx_2 = which.min(com_size_list)
smallest_sizes = c(smallest_sizes, min_idx_2)
# of the 2 smallest size comms, find highest density
if (density_list(smallest_sizes[1]) >= density_list(smallest_sizes[2]) ){
T1=c(T1,smallest_sizes[1]) # smallest_sizes[1] is greater
} else {
T1=c(T1,smallest_sizes[2]) # smallest_sizes[2] is greater
}
com_size_list = temp_mat[,4]
density_list = temp_mat[,3]
modularity_list = temp_mat[,1]
# find 2 smallest size comms
min_idx = which.min(com_size_list)
smallest_sizes = c(smallest_sizes, min_idx)
com_size_list[min_idx] = Inf
min_idx_2 = which.min(com_size_list)
smallest_sizes = c(smallest_sizes, min_idx_2)
# of the 2 smallest size comms, find highest density
if (density_list(smallest_sizes[1]) >= density_list(smallest_sizes[2]) ){
T1=c(T1,smallest_sizes[1]) # smallest_sizes[1] is greater
} else {
T1=c(T1,smallest_sizes[2]) # smallest_sizes[2] is greater
}
com_size_list = temp_mat[,4]
density_list = temp_mat[,3]
modularity_list = temp_mat[,1]
min_idx = which.min(com_size_list)
smallest_sizes = c(smallest_sizes, min_idx)
com_size_list[min_idx] = Inf
min_idx_2 = which.min(com_size_list)
smallest_sizes = c(smallest_sizes, min_idx_2)
if (density_list(smallest_sizes[1]) >= density_list(smallest_sizes[2]) ){
T1=c(T1,smallest_sizes[1]) # smallest_sizes[1] is greater
} else {
T1=c(T1,smallest_sizes[2]) # smallest_sizes[2] is greater
}
com_size_list = temp_mat[,4]
density_list = temp_mat[,3]
modularity_list = temp_mat[,1]
# find 2 smallest size comms
min_idx = which.min(com_size_list)
smallest_sizes = c(smallest_sizes, min_idx)
com_size_list[min_idx] = Inf
min_idx_2 = which.min(com_size_list)
smallest_sizes = c(smallest_sizes, min_idx_2)
# of the 2 smallest size comms, find highest density
if (density_list[smallest_sizes[1]] >= density_list[smallest_sizes[2]] ){
T1=c(T1,smallest_sizes[1]) # smallest_sizes[1] is greater
} else {
T1=c(T1,smallest_sizes[2]) # smallest_sizes[2] is greater
}
T1 = numeric()
T2 = numeric()
# Find T1 (indicies for community of type 1)
com_size_list = temp_mat[,4]
density_list = temp_mat[,3]
modularity_list = temp_mat[,1]
# find 2 smallest size comms
min_idx = which.min(com_size_list)
smallest_sizes = c(smallest_sizes, min_idx)
com_size_list[min_idx] = Inf
min_idx_2 = which.min(com_size_list)
smallest_sizes = c(smallest_sizes, min_idx_2)
# of the 2 smallest size comms, find highest density
if (density_list[smallest_sizes[1]] >= density_list[smallest_sizes[2]] ){
T1=c(T1,smallest_sizes[1]) # smallest_sizes[1] is greater
} else {
T1=c(T1,smallest_sizes[2]) # smallest_sizes[2] is greater
}
T1
source('C:/Users/Steven/Desktop/EE232E_Project1/Q6.R')
T1
T2
T2
largest_sizes
source('C:/Users/Steven/Desktop/EE232E_Project1/Q6.R')
T1
T2
temp_mat
source('C:/Users/Steven/Desktop/EE232E_Project1/Q6.R')
T1
T2
source('C:/Users/Steven/Desktop/EE232E_Project1/Q6.R')
source('C:/Users/Steven/Desktop/EE232E_Project1/Q6.R')
T1
T2
temp_mat
totMat
source('C:/Users/Steven/Desktop/EE232E_Project1/Q6.R')
T1
T2
totMat
cbind(totMat,T1,T2)
source('C:/Users/Steven/Desktop/EE232E_Project1/Q6.R')
T1
T2
totMat
source('C:/Users/Steven/Desktop/EE232E_Project1/Q1.R')
source('C:/Users/Steven/Desktop/EE232E_Project1/Q2.R')
source('C:/Users/Steven/Desktop/EE232E_Project1/Q3_4.R')
